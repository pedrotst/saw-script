let alloc_init ty v = do {
  p <- crucible_alloc ty;
  crucible_points_to p v;
  return p;
};

let ptr_to_fresh n ty = do {
  x <- crucible_fresh_var n ty;
  p <- alloc_init ty (crucible_term x);
  return (x, p);
};

let str_compare = do {
    (st1, p_st1) <- ptr_to_fresh "pt1" (llvm_type "i8*");
    (st2, p_st2) <- ptr_to_fresh "pt2" (llvm_type "i8*");

    crucible_execute_func [p_st1, p_st2];

    // crucible_return (crucible_term {{ if st1 > st2 then -1 else 1: [32]}});
    (ret, p_ret) <- ptr_to_fresh "ret" (llvm_int 32);
    crucible_return (crucible_term ret);
};

let str_length = do {
    (st1, p_st1) <- ptr_to_fresh "pt1" (llvm_type "i8*");

    crucible_execute_func [p_st1];
    (ret, p_ret) <- ptr_to_fresh "ret" (llvm_int 64);
    crucible_return (crucible_term ret);
};

let mycmp = do {
    p1 <- crucible_alloc (llvm_struct "struct.string_struct");
    p2 <- crucible_alloc (llvm_struct "struct.string_struct");

    (st1, p_st1) <- ptr_to_fresh "l" (llvm_type "i8*");
    crucible_points_to (crucible_elem p1 0) p_st1;

    (st2, p_st2) <- ptr_to_fresh "r" (llvm_type "i8*");
    crucible_points_to (crucible_elem p2 0) p_st2;

    crucible_execute_func [p1, p2];
};

let cmp = do {

    (st1, p_st1) <- ptr_to_fresh "l" (llvm_type "i8*");
    (st2, p_st2) <- ptr_to_fresh "r" (llvm_type "i8*");

    crucible_execute_func [p_st1, p_st2];

};

let len = do {

    (st, p_st) <- ptr_to_fresh "l" (llvm_type "i8*");

    crucible_execute_func [p_st];

};

m <- llvm_load_module "mystrcmp.bc";

// strcmp_ov <- crucible_llvm_unsafe_assume_spec m "strcmp" str_compare;
strlen_ov <- crucible_llvm_unsafe_assume_spec m "strlen" str_length;
// crucible_llvm_verify m "my_cmp" [strcmp_ov] false (mycmp str_size) z3;
// crucible_llvm_verify m "cmp" [strcmp_ov] false cmp z3;

crucible_llvm_verify m "my_strlen" [strlen_ov] false cmp z3;
